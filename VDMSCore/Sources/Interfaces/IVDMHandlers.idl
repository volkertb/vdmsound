import "oaidl.idl";

[
	object,
	uuid(BF099600-E3C4-11d4-9C43-00A024112F81),
	helpstring(""),
	pointer_default(unique)
]
interface IIOHandler : IUnknown
{
	typedef [ helpstring("Direction of string operations") ] enum
	{
		DIR_INCREMENT = 0x00,
		DIR_DECREMENT = 0x01
	} DIR_T;



	/******************************************************
	*	IN handlers
	******************************************************/

	[ helpstring("Handles a trapped INB instruction") ]
	HRESULT HandleINB(
		[in] WORD inPort,                   // port the I/O operation is performed on
		[out] BYTE * data );                // data to be returned to the 16-bit application

	[ helpstring("Handles a trapped INW instruction") ]
	HRESULT HandleINW(
		[in] WORD inPort,                   // port the I/O operation is performed on
		[out] WORD * data );                // data to be returned to the 16-bit application

	[ helpstring("Handles a trapped INSB instruction") ]
	HRESULT HandleINSB(
		[in] WORD inPort,                   // port the I/O operation is performed on
		[out, size_is(count)] BYTE data[],  // memory window used to return data to the 16-bit application
		[in] WORD count,                    // width of the memory window (in bytes)
		[in] DIR_T direction );             // direction in which to fill in the memory window

	[ helpstring("Handles a trapped INSW instruction") ]
	HRESULT HandleINSW(
		[in] WORD inPort,                   // port the I/O operation is performed on
		[out, size_is(count)] WORD data[],  // memory window used to return data to the 16-bit application
		[in] WORD count,                    // width of the memory window (in words)
		[in] DIR_T direction );             // direction in which to fill in the memory window



	/******************************************************
	*	OUT handlers
	******************************************************/

	[ helpstring("Handles a trapped OUTB instruction") ]
	HRESULT HandleOUTB(
		[in] WORD outPort,                  // port the I/O operation is performed on
		[in] BYTE data );                   // data from the 16-bit application

	[ helpstring("Handles a trapped OUTW instruction") ]
	HRESULT HandleOUTW(
		[in] WORD outPort,                  // port the I/O operation is performed on
		[in] WORD data );                   // data from the 16-bit application

	[ helpstring("Handles a trapped OUTSB instruction") ]
	HRESULT HandleOUTSB(
		[in] WORD outPort,                  // port the I/O operation is performed on
		[out, size_is(count)] BYTE data[],  // memory window used to retrieve data from the 16-bit application
		[in] WORD count,                    // length of the memory window (in bytes)
		[in] DIR_T direction );             // direction in which to read the memory window

	[ helpstring("Handles a trapped OUTSW instruction") ]
	HRESULT HandleOUTSW(
		[in] WORD outPort,                  // port the I/O operation is performed on
		[out, size_is(count)] WORD data[],  // memory window used to retrieve data from the 16-bit application
		[in] WORD count,                    // length of the memory window (in words)
		[in] DIR_T direction );             // direction in which to read the memory window
};



/////////////////////////////////////////////////////////////////////////////



[
	object,
	uuid(BF099601-E3C4-11d4-9C43-00A024112F81),
	helpstring(""),
	pointer_default(unique)
]
interface IMemHandler : IUnknown
{
	/* TODO: define */
};



/////////////////////////////////////////////////////////////////////////////



[
	uuid(F9F41400-E4D3-11d4-9C44-00A024112F81),
	version(1.0),
	helpstring("VDMHandlers 1.0 Definition Type Library")
]
library IVDMHANDLERSLib
{
	interface IIOHandler;
	interface IMemHandler;
};
